<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Enver&#39;s Note</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bohung.github.io/"/>
  <updated>2016-12-27T13:07:52.000Z</updated>
  <id>https://bohung.github.io/</id>
  
  <author>
    <name>Bo-Hung Liou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML、CSS</title>
    <link href="https://bohung.github.io/2016/11/09/HTML%E3%80%81CSS/"/>
    <id>https://bohung.github.io/2016/11/09/HTML、CSS/</id>
    <published>2016-11-09T07:56:44.000Z</published>
    <updated>2016-12-27T13:07:52.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">opacity: 0;          #透明度</div><div class="line">transition: all 3s;  #漸變效果</div><div class="line">transition: 3s ease;</div><div class="line">overflow: hidden     #隱藏超出範圍</div><div class="line">transform: translateX(-270px); 旋轉、歪斜、放大、縮小、移動元素</div><div class="line"></div><div class="line">絕對定位(左下角)：</div><div class="line">position: absolute   #主元素</div><div class="line">left: 0;</div><div class="line">bottom: 0;</div><div class="line"></div><div class="line">相對定位：</div><div class="line">position: relative;  #副元素</div><div class="line"></div><div class="line">位置固定在瀏覽器的畫面：</div><div class="line">position: fixed;     #副元素</div><div class="line">right: 0;</div><div class="line">bottom: 0;</div><div class="line">-------------------</div><div class="line">z-index: 1~30; #圖層覆蓋</div></pre></td></tr></table></figure>
<p>vertical-align: middle<br>display: inline-block   #與float效果一樣</p>
<p>.menu:hover {<br>  滑鼠移過去會產生而外效果<br>}</p>
<p>margin: 0 auto; #置中<br>float: left;    #靠右對齊<br>float: right;   #靠右對齊<br>clear: both;    #清除浮動</p>
<p>diplay: block; #行內元素轉變成區塊元素<br>text-align: center;     #文字水平置中<br>line-height: 高度一樣px; #垂直置中<br>text-decoration: none;  #刪除文字下底線</p>
<p>background-image: url(../img/background.png)<br>background-repeat: repeat-x;<br>background-color: #色碼;<br>background-position: right bottom  # X軸 Ｙ軸 可用 px or %<br>google:hexadecimal color picker #色碼查詢<br><a href="https://subtlepatterns.com" target="_blank" rel="external">https://subtlepatterns.com</a>      #背景圖片下載</p>
<p>圖片取代文字：<br>text-indent: 101%;    #首行縮排<br>overflow: hidden;     #隱藏超出的東西<br>white-space: nowrap;  #不要斷行</p>
<p>圖片副檔名介紹：<br>.gif    # 動態效果圖片 支援透明背景 只支援256色<br>.jpeg   # 無動畫效果  不支援透明背景 預設是白色背景<br>.png-8  # 支援256色  有透明效果<br>.png-24 # 色系較豐富 有透明效果</p>
<p>solid = 實心線條<br>boder-top: 1px solid #000;<br>boder-bottom: 1px solid #000;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;&lt;li&gt; 是區塊元素</div><div class="line">&lt;a&gt;      是行內元素</div><div class="line"></div><div class="line">&lt;table&gt;</div><div class="line">  &lt;tr&gt;列&lt;/tr&gt;</div><div class="line">  &lt;th&gt;標題欄  預設是粗體&lt;/th&gt;</div><div class="line">  &lt;td&gt;內容欄&lt;/td&gt;</div><div class="line">&lt;/table&gt;</div><div class="line"></div><div class="line">cursor: pointer; #指標變成手的圖案</div><div class="line">&lt;form action=&quot;index.html &quot;&gt;</div><div class="line">  &lt;label for=&quot;mail&quot;&gt;電子郵件：&lt;/label&gt;</div><div class="line">  &lt;input id=&quot;mail&quot; type=&quot;text&quot; placeholder=&quot;請輸入電子郵件&quot; name=&quot;mail&quot;&gt;</div><div class="line">  &lt;label for=&quot;person&quot;&gt;電子郵件：&lt;/label&gt;</div><div class="line">  &lt;input id=&quot;person&quot; type=&quot;text &quot; placeholder=&quot;請輸入姓名&quot; name=&quot;Name&quot;&gt;</div><div class="line">  &lt;input type=&quot;submit&quot; value=&quot;送出&quot;&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;form action=&quot;index.html &quot;&gt;</div><div class="line">  &lt;h2&gt;性別&lt;/h2&gt;</div><div class="line">  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt; 男生</div><div class="line">  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;women&quot;&gt; 女生</div><div class="line">  &lt;h2&gt;興趣&lt;/h2&gt;</div><div class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;movie&quot; name=&quot;hobby&quot;&gt; 看電影</div><div class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;music&quot; name=&quot;hobby&quot;&gt; 聽音樂</div><div class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;read&quot; name=&quot;hobby&quot;&gt; 閱讀</div><div class="line">  &lt;br&gt;</div><div class="line">  &lt;input type=&quot;submit&quot; value=&quot;送出&quot;&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;form&gt;</div><div class="line">  &lt;label for=&quot;birth&quot;&gt;生日：&lt;/label&gt;</div><div class="line">  &lt;select id=&quot;birth&quot; name=&quot;birth&quot;&gt;</div><div class="line">    &lt;option value=&quot;1989&quot;&gt;1989&lt;/option&gt;</div><div class="line">    &lt;option value=&quot;1990&quot;&gt;1990&lt;/option&gt;</div><div class="line">  &lt;/select&gt;</div><div class="line">  &lt;h2&gt;內容：&lt;/h2&gt;</div><div class="line">  &lt;textarea name=&quot;content&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</div><div class="line">  &lt;br&gt;</div><div class="line">  &lt;input type=&quot;submit&quot; value=&quot;送出&quot;&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p><a href="http://purecss.io" target="_blank" rel="external">http://purecss.io</a> # CSS框架參考</p>
<p><a href="http://www.w3schools.com/css/css3_gradients.asp" target="_blank" rel="external">http://www.w3schools.com/css/css3_gradients.asp</a><br>如果指令無法作動，表示該瀏覽器不支援，請參閱上述網站，加入適當的前綴詞。</p>
<p>CSS3 圓弧效果：border-radius: 左上 右上 右下 左下; 50%;             #圓弧效果 50%為圓型<br>CSS3 漸層效果：background: linear-gradient(color1,color2)         #由上到下<br>CSS3 漸層效果：background: linear-gradient(left,color1,color2)    #由左到右<br>CSS3 Box 陰影：box-shadow: 10px 10px 5px gray; (X軸,Y軸,柔焦,顏色)<br><a href="http://caniuse.com" target="_blank" rel="external">http://caniuse.com</a> (查詢指令與瀏覽器之間相容度)<br><a href="http://gs.statcounter.com" target="_blank" rel="external">http://gs.statcounter.com</a> (查詢瀏覽器市佔率)</p>
<p>CSS權重：id(#) -&gt; 100分, html style -&gt; 1000分, class -&gt; 10分, html -&gt; 1分, !important -&gt; 10000分</p>
<p>head 常用語法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line"> &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line"> &lt;title&gt;HTML、CSS教學&lt;/title&gt;</div><div class="line"> &lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot;&gt;</div><div class="line"> &lt;meta name=&apos;description&apos; content=&apos;網站描述文字&apos; /&gt;</div><div class="line"> &lt;meta property=&quot;og:title&quot; content=&quot;FB的標題&quot; /&gt;</div><div class="line"> &lt;meta property=&quot;og:description&quot; content=&quot;FB的描述&quot;&gt;</div><div class="line"> &lt;meta property=&quot;og:type&quot; content=&quot;website&quot; /&gt;</div><div class="line"> &lt;meta property=&quot;og:url&quot; content=&quot;FB上的網址&quot; /&gt;</div><div class="line"> &lt;meta property=&quot;og:image&quot; content=&quot;FB的圖片&quot; /&gt;</div><div class="line"> &lt;link href=&quot;圖片路徑&quot; rel=&quot;apple-touch-icon&quot; /&gt;</div><div class="line"> &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot; /&gt;</div><div class="line"> &lt;link rel=&quot;stylesheet&quot; href=&quot;CSS檔案路徑&quot;&gt;</div><div class="line"> &lt;script type=&quot;text/javascript&quot; src=&quot;JS檔案路徑&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>該如何達到流利寫作的目標？</title>
    <link href="https://bohung.github.io/2016/10/29/%E8%A9%B2%E5%A6%82%E4%BD%95%E9%81%94%E5%88%B0%E6%B5%81%E5%88%A9%E5%AF%AB%E4%BD%9C%E7%9A%84%E7%9B%AE%E6%A8%99%EF%BC%9F/"/>
    <id>https://bohung.github.io/2016/10/29/該如何達到流利寫作的目標？/</id>
    <published>2016-10-29T06:08:47.000Z</published>
    <updated>2016-10-29T06:55:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>寫作其實就是輸出（流利寫作＝流利輸出）</strong></p>
<h1 id="善用-O-R-I-D-思考框架法："><a href="#善用-O-R-I-D-思考框架法：" class="headerlink" title="善用 O R I D 思考框架法："></a>善用 O R I D 思考框架法：</h1><p>Object：關於今天的課程，你記得了什麼？你完成了什麼？  （客觀）<br>Reflective：形容今天的情緒，成就感與挫折感！<br>Interpretive：今天學到了什麼？重要的領悟是什麼？       （主觀）<br>Decisional ：一句話形容今天的工作！哪些項目明天要繼續加強？</p>
<h2 id="其實所有寫的好的文章，架構嚴謹的論說文，都遵循著ORID這四項原則："><a href="#其實所有寫的好的文章，架構嚴謹的論說文，都遵循著ORID這四項原則：" class="headerlink" title="其實所有寫的好的文章，架構嚴謹的論說文，都遵循著ＯＲＩＤ這四項原則："></a>其實所有寫的好的文章，架構嚴謹的論說文，都遵循著ＯＲＩＤ這四項原則：</h2><p><strong>每天你觀察到了什麼</strong><br><strong>你的情緒是如何</strong><br><strong>從中學到的領悟</strong><br><strong>你要改善缺點是什麼</strong></p>
<h1 id="方法：每天寫日記，遵循上述原則，利用三個禮拜短時間內的記憶，在21天的日子裡寫21篇文章。這樣做的目的，有助於腦袋瓜把事實與看法分開，使腦子清晰的思考，清晰地表達，達到快速寫作的境界。"><a href="#方法：每天寫日記，遵循上述原則，利用三個禮拜短時間內的記憶，在21天的日子裡寫21篇文章。這樣做的目的，有助於腦袋瓜把事實與看法分開，使腦子清晰的思考，清晰地表達，達到快速寫作的境界。" class="headerlink" title="方法：每天寫日記，遵循上述原則，利用三個禮拜短時間內的記憶，在21天的日子裡寫21篇文章。這樣做的目的，有助於腦袋瓜把事實與看法分開，使腦子清晰的思考，清晰地表達，達到快速寫作的境界。"></a>方法：每天寫日記，遵循上述原則，利用三個禮拜短時間內的記憶，在21天的日子裡寫21篇文章。這樣做的目的，有助於腦袋瓜把事實與看法分開，使腦子清晰的思考，清晰地表達，達到快速寫作的境界。</h1><blockquote>
<p>短時間形成寫作與思考的肌肉記憶（毫不費力地對於現況進行紀錄反省與實踐）</p>
</blockquote>
<h1 id="後記：在行為心理學上有一個理論，養成一個原本沒有的習慣，需要21天，換言之，要形成一個新的行為或習慣需要21天，在21天之後就不用刻意提醒自己也會照著新的習慣做事。"><a href="#後記：在行為心理學上有一個理論，養成一個原本沒有的習慣，需要21天，換言之，要形成一個新的行為或習慣需要21天，在21天之後就不用刻意提醒自己也會照著新的習慣做事。" class="headerlink" title="後記：在行為心理學上有一個理論，養成一個原本沒有的習慣，需要21天，換言之，要形成一個新的行為或習慣需要21天，在21天之後就不用刻意提醒自己也會照著新的習慣做事。"></a>後記：在行為心理學上有一個理論，養成一個原本沒有的習慣，需要21天，換言之，要形成一個新的行為或習慣需要21天，在21天之後就不用刻意提醒自己也會照著新的習慣做事。</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;寫作其實就是輸出（流利寫作＝流利輸出）&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;善用-O-R-I-D-思考框架法：&quot;&gt;&lt;a href=&quot;#善用-O-R-I-D-思考框架法：&quot; class=&quot;headerlink&quot; title=&quot;善用 O R I D 思考框
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rails程式碼整理技巧</title>
    <link href="https://bohung.github.io/2016/10/26/Rails%E7%A8%8B%E5%BC%8F%E7%A2%BC%E6%95%B4%E7%90%86%E6%8A%80%E5%B7%A7/"/>
    <id>https://bohung.github.io/2016/10/26/Rails程式碼整理技巧/</id>
    <published>2016-10-26T12:52:32.000Z</published>
    <updated>2016-11-04T12:22:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="View"><a href="#View" class="headerlink" title="View:"></a>View:</h1><p><strong>寫 View 時，可以預見需要裝飾的字串（複雜邏輯區塊）使用 Helper(全域變數) 包裝</strong><br>原因：邏輯清楚，程式碼可以「自己敘述自己」</p>
<p>What is helper?</p>
<ul>
<li>View 中整理 Html 的一些小方法</li>
<li>用Ruby code 整理常見的 view 功能</li>
</ul>
<p>常見需要用 Helper 包裝的地方:<br>1.標題  2.敘述 3.連結 4.圖片 5.按鈕</p>
<h2 id="利用系統的help-整理code"><a href="#利用系統的help-整理code" class="headerlink" title="利用系統的help,整理code"></a>利用系統的help,整理code</h2><p>時間格式<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;td&gt; &lt;%= post.updated_at.to_s(:long) %&gt; &lt;/td&gt;</div><div class="line">&lt;td&gt; &lt;%= post.updated_at.to_s(:short) %&gt; &lt;/td&gt;</div></pre></td></tr></table></figure></p>
<p>post 的 content 能自動斷行<br><figure class="highlight rb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;td&gt; &lt;%= simple_format(post.content) %&gt; &lt;<span class="regexp">/td&gt;</span></div></pre></td></tr></table></figure></p>
<p>標題太長就斷行用 …… 來顯示<br><figure class="highlight rb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;td&gt;  &lt;%= link_to(truncate(group.title, <span class="symbol">length:</span> <span class="number">15</span> ), group_path(group)) %&gt; &lt;<span class="regexp">/td&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="自己撰寫help-包裝html"><a href="#自己撰寫help-包裝html" class="headerlink" title="自己撰寫help, 包裝html"></a>自己撰寫help, 包裝html</h2><figure class="highlight rb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_post_content</span><span class="params">(post)</span></span></div><div class="line">  simple_format(truncate(post.content, <span class="symbol">lenth:</span> <span class="number">100</span>)) <span class="comment">#內容斷行,只顯示頭一百字</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><h1 id="Controller、Model"><a href="#Controller、Model" class="headerlink" title="Controller、Model:"></a>Controller、Model:</h1><p><strong>繼承、混入(module)</strong><br>如果 Model 超過 3 個 PageDown, 拆 Module<br>如果 Controller 每個 action 都有重複的 code, 使用 <code>before_action</code></p>
<p>如果多個 Controller 有同樣的少樣幾行 action，可以利用繼承來整理code</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-class Admin::OrdersController &lt; ApplicationController</div><div class="line">-  layout `&lt;blink&gt;` &quot;admin&quot;</div><div class="line">-  before_action :authenticate_user!</div><div class="line">-  before_action :admin_required</div><div class="line"></div><div class="line">+class Admin::OrdersController &lt; AdminController</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-class Admin::ProductsController &lt; ApplicationController</div><div class="line">-  layout &quot;admin&quot;</div><div class="line">-  before_action :authenticate_user!</div><div class="line">-  before_action :admin_required</div><div class="line"></div><div class="line">+class Admin::ProductsController &lt; AdminController</div></pre></td></tr></table></figure>
<p>新增 admin_controller.rb 讓上述兩個controller來繼承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class AdminController &lt; ApplicationController</div><div class="line">  layout &quot;admin&quot;</div><div class="line">  before_action :authenticate_user!</div><div class="line">  before_action :admin_required</div></pre></td></tr></table></figure></p>
<h2 id="Service-Objectl："><a href="#Service-Objectl：" class="headerlink" title="Service Objectl："></a>Service Objectl：</h2><pre><code>- method邏輯極其複雜的時候
- 跨Model使用，無法特別歸類於特定Model
- 與外部服務有較多關連 - 並非重要功能
- 同一種method有許多類似的使用方法
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;View&quot;&gt;&lt;a href=&quot;#View&quot; class=&quot;headerlink&quot; title=&quot;View:&quot;&gt;&lt;/a&gt;View:&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;寫 View 時，可以預見需要裝飾的字串（複雜邏輯區塊）使用 Helper(全域變數) 包裝&lt;/stro
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ruby on rails即戰力課程心得</title>
    <link href="https://bohung.github.io/2016/10/26/Ruby-on-rails%E5%8D%B3%E6%88%B0%E5%8A%9B%E8%AA%B2%E7%A8%8B%E5%BF%83%E5%BE%97/"/>
    <id>https://bohung.github.io/2016/10/26/Ruby-on-rails即戰力課程心得/</id>
    <published>2016-10-26T12:28:45.000Z</published>
    <updated>2016-10-26T12:48:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>人生真得有許多奇妙與巧合的事情，用個貼切的形容詞來說，我想是緣份吧！沒有程式底子的我，買了一本書，利用下班後的時間，靠著自學Javascript學得很辛苦。我在2016年2月27日認識丁丁，他當時以初學者為對象，教學PHP程式設計課程，他在4/3號臉書上表明想要教學初探rails，而我是在做倉管一職的工作，對初探rails這名詞感到好奇，我隨即與丁丁表明想學。從他口中間接得知Xdite在四月份開了高雄rails即戰力的課程，高雄場錯過這次要再等半年，因為報名已經截止，我思索了幾天，隨即寄信給Xdite說：再過幾天4/8就要開課，而我現在才知道有這課程，現在報名還來得急嗎？而她給我的忠告是“如果你先練完 Rails 101 三遍的話，可以先來第一堂試看看。不然後天就開始上課了。我怕你來不及完成準備會很挫折”。心裡頭想的是這講師真好，如此與眾不同，願意讓我免費試聽第一堂課;想給自己一個挑戰的機會，高雄rails班4/8號開課在即，我跟公司告假，拼命的練習rails101，心急如焚的我遇到很多bug，丁丁在這段期間幫助我很多，仿佛給了我一把鑰匙，進入這廣大的RoR雲海，帶著我一步步在我mac上環境設定，跑初探rails，幫我debug分析原因，最後在上課前夕，我終於完成了一次的練習。</p>
<p>戰戰兢兢的上完第一堂課程，原本擔心自己會聽不懂，卻發覺自己跟得上進度，課程短暫卻很充實，有別於一般的授課方式，深深吸引著我，對比幾天前的一知半解，到現在矇懞懂懂，發現自己對於ROR產生了莫大的熱情，加上看了Xdite的blog:其實，你應該學會的是賺錢！由於我工作月休僅只有七天，課程給的資源很多，初學者的我消化很慢，我萌生一個念頭，我想為我的人生旅途添加點色彩，我毅然決然的辭去工作，此時此刻起我的人生開始變得不一樣。曉得自己能力的不足，心底暗自告訴自己絕不能錯過office hour以及meetup，即便時間僅有3小時，但有助教的幫忙，成長快了許多，在此也要感謝助教無私的奉獻！了解到幫助他人，能夠找到自己的盲點，補足自己不足的地方，更是讓自己進步的方式之一，如果當我具備足夠的能力時，我也要回饋給別人。</p>
<p>我幾乎天天都去Eagle練習，很快地做完課程進度，卻似懂非懂，我想起Xdite的教學理念：肌肉式學習法，我花了大量的時間，不斷的練習與理解，反反覆覆好幾回，當然也遇到很大的撞牆期，試著讓自己渴望的熱情佔據心理。漸漸地發現自己似乎有學到東西，漸漸的我意識到一個重點，rails即戰力班給了我一個機會，一張快速進入Ruby on rails門票的機會，從“做中學，學中做”當中明瞭我該如何走在正確的學習道路上，至於課程結束後，還有很多自己要惡補的知識與技能。未來想從事rails developer的工作，不斷鞭策自己，期望短時間內能有很大的進步，並且盡快的找到rails的工作能持續精進自己;很感謝Xdite開了這門課，且不斷的更改課程以符合最適切的想法，也很高興她把求職攻略獨立成一個章節，對於程式零底子，猶如一張白紙的我很大的助力，大幅縮減了我起步的速度與改變了我出發的方向，至於要走的多遠多廣，還得仰賴自己的學習能力，畢竟成功不是鮮花堆砌成的牌樓，而是血汗凝聚的長城。</p>
<p>  <strong>勉勵自己的話語</strong><br>李安：既然是自己相信的東西，就要堅持;始終守著你的心願，就會實現。<br>奧運格言：奧運的重點不在於獲勝，而是參與;人生的要領不在於征服，而是全力以赴。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生真得有許多奇妙與巧合的事情，用個貼切的形容詞來說，我想是緣份吧！沒有程式底子的我，買了一本書，利用下班後的時間，靠著自學Javascript學得很辛苦。我在2016年2月27日認識丁丁，他當時以初學者為對象，教學PHP程式設計課程，他在4/3號臉書上表明想要教學初探ra
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SEO技巧(Search Engine Optimization)</title>
    <link href="https://bohung.github.io/2016/10/26/SEO%E6%8A%80%E5%B7%A7-Search-Engine-Optimization/"/>
    <id>https://bohung.github.io/2016/10/26/SEO技巧-Search-Engine-Optimization/</id>
    <published>2016-10-26T12:24:30.000Z</published>
    <updated>2016-10-26T12:48:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SEO原則："><a href="#SEO原則：" class="headerlink" title="SEO原則："></a>SEO原則：</h1><h2 id="gt-幫網頁畫重點"><a href="#gt-幫網頁畫重點" class="headerlink" title="&gt; 幫網頁畫重點"></a>&gt; 幫網頁畫重點</h2><p>Html Tag：</p>
<pre><code>- H1大標（一頁只能有一個）、H2中標（一頁2或3個）、H3小標（6～10個）
- P：文章
- Strong：強調重點
- image &quot;alt&quot;：取代圖片的文字
</code></pre><p>Meta：</p>
<pre><code>- title：建立獨特、準確的網頁標題
- meta description：敘述本頁的內容，字數控制在100字內。
- meta keywords：敘述本頁的關鍵字
</code></pre><p>權重：依序遞減</p>
<pre><code>- title
- data description
- h1
- h2
- h3
- Strong
- P
</code></pre><p>工具：<br>    -Google Webmaster：它會告訴你哪裡扣分，具體告訴你它懷疑你哪裡作弊。<br>    -gem”seo_helper”：具體告訴你它懷疑你哪裡作弊</p>
<p>豆知識：div(塊級元素) span(行內元素)，對於SEO沒有幫助</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SEO原則：&quot;&gt;&lt;a href=&quot;#SEO原則：&quot; class=&quot;headerlink&quot; title=&quot;SEO原則：&quot;&gt;&lt;/a&gt;SEO原則：&lt;/h1&gt;&lt;h2 id=&quot;gt-幫網頁畫重點&quot;&gt;&lt;a href=&quot;#gt-幫網頁畫重點&quot; class=&quot;headerlink
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rails即戰力課程第四週筆記</title>
    <link href="https://bohung.github.io/2016/10/26/Rails%E5%8D%B3%E6%88%B0%E5%8A%9B%E8%AA%B2%E7%A8%8B%E7%AC%AC%E5%9B%9B%E9%80%B1%E7%AD%86%E8%A8%98/"/>
    <id>https://bohung.github.io/2016/10/26/Rails即戰力課程第四週筆記/</id>
    <published>2016-10-26T12:09:02.000Z</published>
    <updated>2016-10-26T12:48:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="請列出五條-Yahoo-Frontend-Best-Performance-最佳實務"><a href="#請列出五條-Yahoo-Frontend-Best-Performance-最佳實務" class="headerlink" title="請列出五條 Yahoo Frontend Best Performance 最佳實務"></a>請列出五條 Yahoo Frontend Best Performance 最佳實務</h1><h2 id="Put-Stylesheets-at-the-Top-CSS-Put-Scripts-at-the-Bottom-Javascript"><a href="#Put-Stylesheets-at-the-Top-CSS-Put-Scripts-at-the-Bottom-Javascript" class="headerlink" title="Put Stylesheets at the Top(CSS)/Put Scripts at the Bottom(Javascript)"></a>Put Stylesheets at the Top(CSS)/Put Scripts at the Bottom(Javascript)</h2><p>把CSS放置於網頁上方/把Javascript放置於網站下方，Script文件所造成的效能問題在於，下載Script時會阻斷其他並行的檔案下載，而直到Script文件下載完畢前，都不會下載網頁中的其他物件。</p>
<p>原理在於CSS要先出來，才能美化網頁，通常是放在head優先下載，JavaScript 幾乎都是等 HTML 跑完再執行，所以挪到後面再下載。</p>
<h2 id="Minimize-HTTP-Requests-Content"><a href="#Minimize-HTTP-Requests-Content" class="headerlink" title="Minimize HTTP Requests (Content)"></a>Minimize HTTP Requests (Content)</h2><p>藉由減少HTTP請求數量來調校網站的執行效能是個不錯的開始，Combined files方法是透過將所有Script整合成一份Script，達到減少HTTP請求數量的目的，如網站中所有需要的CSS都彙整成一份CSS檔案，HTTP就可以減少為一次，減少Response時間，但當每個網頁所需要的CSS或Script不同時，就會增加實作上的難度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">假設我們網頁上有 10 隻 CSS。每下載一個檔案，都會需要「發出下載請求」，即會有 10 倍「發出下載請求的時間」，不如打包成一隻 CSS 下載。比較省時。</div></pre></td></tr></table></figure></p>
<h2 id="Use-a-Content-Delivery-Network-Server"><a href="#Use-a-Content-Delivery-Network-Server" class="headerlink" title="Use a Content Delivery Network(Server)"></a>Use a Content Delivery Network(Server)</h2><p>content delivery network (CDN) 是透過分散各地儲存相同內容的web server更有效率傳送相關內容到用戶端，通常都依據用戶端所在計算選用對應的web server來發送內容，例如選用透過較少的network hops或是具最快response time的web server。<br>CDN加速：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果我們的機器在美國，在台灣開網站靜態網站會下載很慢，因為我們要從美國下載檔案到台灣，應該台灣這邊要有副本可以直接下載。</div></pre></td></tr></table></figure></p>
<h2 id="Split-Components-Across-Domains"><a href="#Split-Components-Across-Domains" class="headerlink" title="Split Components Across Domains"></a>Split Components Across Domains</h2><p>當使用者瀏覽網站時，一個頁面上的檔案有很多需要被下載，HTTP Potocol對同一個 host : artstore.com  同時下載數量有限，可以切成不同的網域加速下載。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">config.action_controller.asset_host = “http://assets%d.artstore.com&quot;</div><div class="line">assets01.artstore.com</div><div class="line">assets02.artstore.com</div><div class="line">assets03.artstore.com</div></pre></td></tr></table></figure></p>
<h2 id="Gzip-Components-server"><a href="#Gzip-Components-server" class="headerlink" title="Gzip Components(server)"></a>Gzip Components(server)</h2><p>一般而言，傳送HTTP請求到取得回應所花費的時間可由前端上做大幅度的改善，當然其他因素如：使用者的網路頻寬速度、網際網路服務商等等也會造成影響，但這些都不在開發團隊的管轄，但還有其他變數，像是壓縮(Compression)可縮小HTTP請求的檔案大小進一步減少Response time。</p>
<p>從HTTP/1.1開始，在HTTP請求中加入Accept-Encoding header可使Client端可支援壓縮，指令如下：<br>Accept-Encoding: gzip, deflate</p>
<p>當Server端接收到含有此header的請求，就會使用Client端指定的方式中選定一個執行壓縮，而Server端則在回應加入一行Content-Encoding header 指令：<br>Content-Encoding: gzip</p>
<p>Gzip是目前最常見與最具效率的壓縮方式，一般而言可減少約70％左右的response檔案大小，現今聲稱90%網路中透過瀏覽器傳送的請求與回應都支援Gzip。</p>
<p>Server根據檔案類型決定是否做Gzip，大多數網站對HTML文件做Gzip，包含scripts, stylesheet或是其他text response像是XML, JSON，而對image與PDF則不做Gzip，因為這些檔案本身已經做過壓縮。</p>
<p>盡可能對可執行Gzip的文件實作Gzip是一種簡單降低page weight與提升使用者體驗的方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;請列出五條-Yahoo-Frontend-Best-Performance-最佳實務&quot;&gt;&lt;a href=&quot;#請列出五條-Yahoo-Frontend-Best-Performance-最佳實務&quot; class=&quot;headerlink&quot; title=&quot;請列出五條 Ya
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rails即戰力課程第三週筆記</title>
    <link href="https://bohung.github.io/2016/10/26/Rails%E5%8D%B3%E6%88%B0%E5%8A%9B%E8%AA%B2%E7%A8%8B%E7%AC%AC%E4%B8%89%E9%80%B1%E7%AD%86%E8%A8%98/"/>
    <id>https://bohung.github.io/2016/10/26/Rails即戰力課程第三週筆記/</id>
    <published>2016-10-26T12:08:55.000Z</published>
    <updated>2016-10-26T12:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="請講解-「繼承」這個觀念："><a href="#請講解-「繼承」這個觀念：" class="headerlink" title="請講解 「繼承」這個觀念："></a>請講解 「繼承」這個觀念：</h2><p>Inheritance（繼承）的意思就是繼承者擁有被繼承者的特性，用於類別(class)的繼承，所以子類別可以呼叫父類別的方法。</p>
<h2 id="為什麼-Rails-要分-production-test-development-三種環境？"><a href="#為什麼-Rails-要分-production-test-development-三種環境？" class="headerlink" title="為什麼 Rails 要分 production, test, development 三種環境？"></a>為什麼 Rails 要分 production, test, development 三種環境？</h2><blockquote>
<p>不同環境的差異在於有不同的設定，除了資料庫設定 database.yml 裡分開設定之外，個別的環境設定放在 config/environments/development.rb、config/environments/test.rb 和 config/environments/production.rb，它們可以有不同的 Log 層級、Session 設定、Email 設定等等。</p>
</blockquote>
<p><strong>development environment 開發模式，用在你的開發的時候。</strong></p>
<p>使用 Rails 開發可以快速的原因之一，就是當你修改一個小東西，只要重新整理瀏覽器就可以馬上看到修改後的結果。這個秘訣就在於 cache_classes = false 會讓每一次的 HTTP 請求都重新載入類別檔案。更仔細的說，當這個值是 false 的時候，Rails 會改用 Ruby 的 load 方法，每次執行都會重新載入一次。<br>Rails只有在連線是來自本地端的時候，才會將發生錯誤時的Call stack trace資訊給瀏覽器顯示。這個設定將所有連線都當做本地端連線，好讓開發模式時所有人連線都可以看到錯誤訊息。</p>
<p><strong>test environment 測試模式，用在自動測試時。</strong></p>
<p>不同於 development 或 production 在test模式，碰到例外會直接出現，出錯時瀏覽器不會顯示出 call stack trace 或 public/500.html 畫面。</p>
<p><strong>production environment 正式上線模式，用在實際的上線運作環境。</strong></p>
<p>cache_classes = true 表示在 production 中，類別檔案載入進記憶體中就快取起來了，效能提升。不像在 development 環境中每一次 HTTP 請求就會重新載入一次。<br>不同於 development，如果在 production 環境出現例外錯誤，不會顯示程式 call stack 訊息，而是回傳 public/500.html 頁面。</p>
<h2 id="請玩-delayed-job-與-sidekiq-兩套-gem-解釋他們的差異："><a href="#請玩-delayed-job-與-sidekiq-兩套-gem-解釋他們的差異：" class="headerlink" title="請玩 delayed_job 與 sidekiq 兩套 gem, 解釋他們的差異："></a>請玩 delayed_job 與 sidekiq 兩套 gem, 解釋他們的差異：</h2><p>Sidekiq：利用 redis: key-value 來儲存要執行的任務去儲存work 然後去執行他。<br>delay_job：新增一個table把 work 丟進去執行。<br>相對來說 delay_job 不管是在local 還是heroku是非常容易操作及安裝的！</p>
<h2 id="什麼時機要用-Helper-什麼時機要用-Partial？"><a href="#什麼時機要用-Helper-什麼時機要用-Partial？" class="headerlink" title="什麼時機要用 Helper, 什麼時機要用 Partial？"></a>什麼時機要用 Helper, 什麼時機要用 Partial？</h2><p>Partial：</p>
<pre><code>- 檔案裡 HTML 超過兩頁（long template）
- HTML 內容高度重複（highly duplicated）
- 可獨立作為功能區塊（independent blocks）
</code></pre><p>Helper：</p>
<pre><code>- 產生的 HTML code 需要與原始程式碼進行一些邏輯混合，但不希望 View 裡面搞得太複雜。
- 需要與 Rails 內建預設好的一些方便 Helper 交叉使用。
</code></pre><p>conclusion：</p>
<pre><code>- partial 負責處理大片的 HTML code，或是之後要利用 ajax render 出來的片段。
- helper 則負責處理跟邏輯判斷有關的東西。
</code></pre><h2 id="什麼時候要用-Service-Object？"><a href="#什麼時候要用-Service-Object？" class="headerlink" title="什麼時候要用 Service Object？"></a>什麼時候要用 Service Object？</h2><p>顧名思義，Service Object是因為有某些類似的特定功能，像是一個『service』，跟資料庫中的model並無直接關係，因此拉出來獨立成為一個class，在邏輯上會更容易管理。</p>
<pre><code>- method邏輯極其複雜的時候
- 跨Model使用，無法特別歸類於特定Model
- 與外部服務有較多關連 - 並非重要功能
- 同一種method有許多類似的使用方法
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;請講解-「繼承」這個觀念：&quot;&gt;&lt;a href=&quot;#請講解-「繼承」這個觀念：&quot; class=&quot;headerlink&quot; title=&quot;請講解 「繼承」這個觀念：&quot;&gt;&lt;/a&gt;請講解 「繼承」這個觀念：&lt;/h2&gt;&lt;p&gt;Inheritance（繼承）的意思就是繼承者擁有被
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rails即戰力課程第二週筆記</title>
    <link href="https://bohung.github.io/2016/10/26/Rails%E5%8D%B3%E6%88%B0%E5%8A%9B%E8%AA%B2%E7%A8%8B%E7%AC%AC%E4%BA%8C%E9%80%B1%E7%AD%86%E8%A8%98/"/>
    <id>https://bohung.github.io/2016/10/26/Rails即戰力課程第二週筆記/</id>
    <published>2016-10-26T12:08:00.000Z</published>
    <updated>2016-10-26T12:48:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="before-action-的使用時機："><a href="#before-action-的使用時機：" class="headerlink" title="before_action 的使用時機："></a>before_action 的使用時機：</h2><ul>
<li><p>before_action 是什麼？<br>定義在進入Action之前，執行特定的方法，用以減少controller裡面重複的程式碼。<br>Rails在run controller下的 action 前要先跑指定的method。</p>
</li>
<li><p>為什麼要用 before_action？<br>目的在於簡化程式碼，以利程式碼的可讀性和加快程式執行的速度。</p>
</li>
<li><p>如何使用 before_action？<br>在controller裡面，所有方法定義Ｍethods之前使用。</p>
<figure class="highlight rb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">before_action <span class="symbol">:authenticate_user!</span> <span class="symbol">only:</span> [<span class="symbol">:edit</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>程式碼在執行methods之前會先執行身份驗證的機制，可以利用only,except此兩個關鍵字來限定哪些Action要執行，上述程式碼僅有edit所定義的方法才會執行身份驗證。</p>
<h2 id="session-與-cookie-的差別："><a href="#session-與-cookie-的差別：" class="headerlink" title="session 與 cookie 的差別："></a>session 與 cookie 的差別：</h2><ul>
<li>什麼是 session 跟 cookie？</li>
</ul>
<blockquote>
<p>看演唱會或是去遊樂園玩常常會發生一種情況，就是入場以後要暫時出場，這時候工作人員通常會給你蓋個手章，用來註記你曾經入場過，基本上 Cookies 的功用就是這個手章，只要使用者進到我們的網站，我們就幫他儲存一個 Cookies ，下次當使用者再度造訪時我們就可以由 Cookies 得知使用者的資訊。有些遊樂園的手章上會標記當天的入園時間，以免有人回家不洗澡隔天又來玩一次，而 cookies 記錄這個時間的方法就是以 key/value 的形式儲存在使用者的瀏覽器中，但 Cookies 屬於沒有加密的公開檔案，所以不建議儲存敏感資料。</p>
<p>相較於 Cookies 存在 Client 端， Session 則是存在 Server 的資料，通常與 Cookies 相呼應。當使用者造訪我們的網站時，我們由伺服器產生 session id (32 byte long MD5 hash value)，並傳送存有這個 session id 的 cookie 給瀏覽器儲存，之後使用者造訪我們網站時，只需要比對 cookies 上的 session id 和 session 裡的 session id 就可以知道使用者身份，大部份的網站也是運用此原理實作儲存 User 登入狀態的機制。這樣做的好處是若有人劫取到使用者的 Cookies 資料也無法得知資料內容，但是仍有 Hijacking 攻擊的疑慮。</p>
</blockquote>
<ul>
<li><p>為什麼要用 session 跟 cookie？<br>用來儲存資料的手段，常用來作為使用者是否登入的方法。</p>
</li>
<li><p>Rails 內如何操作 session?<br>在 Rails 內只要用 <code>session[:session_name]</code>的 instance method 就可以取得 session 的特定資料了。<br>若要新增或是覆蓋現有的 session 資料，只要用<code>session[:session_name] = ＹＹＹ</code>就可以了<br>若要刪除特定的 session 值，只要下<code>session_delete(:session_name)</code></p>
</li>
</ul>
<h2 id="狀態機："><a href="#狀態機：" class="headerlink" title="狀態機："></a>狀態機：</h2><ul>
<li><p>什麼是狀態機？<br>可以透過aasm狀態機去做物件狀態的切換，在EC網站下就是去管理及切換已下單,已付款,已出貨,出貨中,退貨,取消訂單等狀態。</p>
</li>
<li><p>為什麼要使用狀態機去設計訂單狀態？<br>避免手動操作狀態而使狀態混亂，在設定好的規則下讓狀態機來做狀態的管理及切換。</p>
</li>
<li><p>如何在 Rails 內設計狀態機機制？(以Ec-shop網站為例)</p>
<ol>
<li>安裝 <code>gem &quot;aasm&quot;</code></li>
<li>order 新增 aasm_state 欄位</li>
<li>設定訂單狀態機制</li>
<li>用 AASM 的機制設定訂單付款</li>
</ol>
</li>
</ul>
<h2 id="如何讓-strong-parameter-接受-nested-attributes："><a href="#如何讓-strong-parameter-接受-nested-attributes：" class="headerlink" title="如何讓 strong_parameter 接受 nested_attributes："></a>如何讓 strong_parameter 接受 nested_attributes：</h2><p>step 1:在Model中，宣告我們可以接受的Attributes。 （model:Photo.rb,Product.rb）<br>step 2:在Controller中，指定接受的Attributes。 （products_controller.rb）</p>
<h2 id="board-has-many-posts-新造物件宣告方式是：-post-boards-posts-build-。那如果-book-has-one-author，請問要怎麼宣告？"><a href="#board-has-many-posts-新造物件宣告方式是：-post-boards-posts-build-。那如果-book-has-one-author，請問要怎麼宣告？" class="headerlink" title="board has_many posts, 新造物件宣告方式是： @post = @boards.posts.build 。那如果 book has_one :author，請問要怎麼宣告？"></a>board has_many posts, 新造物件宣告方式是： @post = @boards.posts.build 。那如果 book has_one :author，請問要怎麼宣告？</h2><p>@author=@book.build.author</p>
<h2 id="after-create-是一種-model-callbacks-請問-model-有多少種-call-backs-請列出來"><a href="#after-create-是一種-model-callbacks-請問-model-有多少種-call-backs-請列出來" class="headerlink" title="after_create 是一種 model callbacks, 請問 model 有多少種 call backs 請列出來"></a>after_create 是一種 model callbacks, 請問 model 有多少種 call backs 請列出來</h2><ol>
<li><code>before_validation</code></li>
<li><code>before_create</code></li>
<li><code>before_save</code></li>
<li><code>after_validation</code></li>
<li><code>after_create</code></li>
<li><code>after_save</code></li>
<li><code>after_commit</code></li>
</ol>
<h2 id="in-controller-render-與-redirect-to-的差異："><a href="#in-controller-render-與-redirect-to-的差異：" class="headerlink" title="(in controller ) render 與 redirect_to 的差異："></a>(in controller ) render 與 redirect_to 的差異：</h2><p><code>render</code>: 不執行action，不改變url的狀態下，直接套用某一個view。<br><code>redirect_to</code>:會執行指定頁面的controller action，直接轉址到某個url。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;before-action-的使用時機：&quot;&gt;&lt;a href=&quot;#before-action-的使用時機：&quot; class=&quot;headerlink&quot; title=&quot;before_action 的使用時機：&quot;&gt;&lt;/a&gt;before_action 的使用時機：&lt;/h2&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rails即戰力課程第一週筆記</title>
    <link href="https://bohung.github.io/2016/10/26/Rails%E5%8D%B3%E6%88%B0%E5%8A%9B%E8%AA%B2%E7%A8%8B%E7%AC%AC%E4%B8%80%E9%80%B1%E7%AD%86%E8%A8%98/"/>
    <id>https://bohung.github.io/2016/10/26/Rails即戰力課程第一週筆記/</id>
    <published>2016-10-26T12:07:10.000Z</published>
    <updated>2016-10-26T12:48:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="User-Stroy"><a href="#User-Stroy" class="headerlink" title="User Stroy:"></a>User Stroy:</h2><ul>
<li><p>user story 是什麼：<br>User stories 是一種非常好用且容易上手的需求文件，它是一種極簡主義，只要求寫下最有價值不要忘記的東西，而且夠讓我們足以估計時程以及與客戶溝通。簡單來說就是使用者期待系統解決的問題與希望從系統獲得之資訊。</p>
</li>
<li><p>為什麼我們要用 user story：<br>透過使用者故事的方式，以客戶面向為主體，開發者與客戶不斷地溝通，才能找到真正的需求，且正確的開發方式。作為開發者我們可以協助撰寫和提供建議，但是這應該是客戶的責任。</p>
</li>
<li><p>如何使用 user story：</p>
<blockquote>
<p>身為一個 ，我希望能有  以便能讓我 <br>As a (role of user), I want (some feature) so that (some business value).</p>
</blockquote>
<p>資訊系統開發人員與使用者以及高階管理者需有高度的互動，以利釐清開發的方向及提升需求分析的效率與效能，作為後續系統設計和導入的濫觴。</p>
</li>
</ul>
<h2 id="routing-的-namespace："><a href="#routing-的-namespace：" class="headerlink" title="routing 的 namespace："></a>routing 的 namespace：</h2><ul>
<li><p>namespace 是什麼？<br>Namespace是Scope的一種特定應用，特別適合例如後台介面。目的在避免大家使用同樣的名稱為類別，物件命名的一種機制。<br>舉例來說，如果大家剛好都有一個叫做 Animal 的類別或是 Flyable 的模組，放在同一個專案裡就衝突了。所以 Ruby 有設計 namespace 來解決這個問題。</p>
</li>
<li><p>為什麼我們要用 namespace？<br>namespace主要的功能就是為相同名稱的東西做出區隔、或是分類。</p>
</li>
<li><p>如何使用 namespace?<br>在Rails裡最常見的就是把管理用的Controller放到admin下面，假使我們有兩組Controller都叫做ProductsController，但一個是設計給系統管理員用，一個是給一般使用者用，若我們把系統管理員用的放到Admin下面就可以輕易區分出哪個是哪個了。</p>
</li>
</ul>
<h2 id="strong-parameter："><a href="#strong-parameter：" class="headerlink" title="strong parameter："></a>strong parameter：</h2><ul>
<li><p>strong parameter 是什麼？<br>Rails 的 Form 綁 Model 設計非常直觀直覺，表單欄位直接對應到 Model 欄位。但也因此，容易被 Hack 猜中關鍵欄位的慣例，在瀏覽器自造欄位入侵測試，因而產生安全疑慮。在 Rails 4 時，維護團隊發明一套方法能夠有效地解決這個問題。這套機制就是 Strong Parameters(合法參數）。</p>
</li>
<li><p>為什麼我們要用 strong parameter？<br>利用合法參數來建立白名單的機制，以確保資訊安全，避免機密資訊外流。</p>
</li>
<li><p>如何使用 strong parameter？<br>語法：<code>params.require(:model_name).permit(:欄位_1, :欄位_2)</code><br>Strong Parameters 的想法是若參數沒有被允許，就是非法欄位，無法被直接送進 create / update method 更新，若試圖傳入未允許的欄位，會拋 ActiveModel::ForbiddenAttributesError 錯誤。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;User-Stroy&quot;&gt;&lt;a href=&quot;#User-Stroy&quot; class=&quot;headerlink&quot; title=&quot;User Stroy:&quot;&gt;&lt;/a&gt;User Stroy:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;user story 是什麼：&lt;br&gt;User sto
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ruby on rails面試題目</title>
    <link href="https://bohung.github.io/2016/10/19/hello-world/"/>
    <id>https://bohung.github.io/2016/10/19/hello-world/</id>
    <published>2016-10-19T12:51:19.000Z</published>
    <updated>2017-01-10T08:53:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3><br>有一堆疊(stack)，一開始狀態為空，假設push(X)指令會將資<br>料X 放入堆疊，pop 指令會將堆疊頂端的資料輸出。現在有ABCDE<br>五個資料依序以push 指令放入堆疊中，在放入的過程中與結束<br>後，我們陸續執行了一些pop 指令，下列何者為不可能的輸出？<br>(A) ABCDE (B) EDCBA (C) EABCD (D) ABDEC。<br></h3>

<p>Stack的特性：FILO(先進後出) 、LIFO(後進先出)<br>(A)ABCDE<br>PUSH (A)<br>POP ( )………………輸出A<br>PUSH (B)<br>POP ( )………………輸出B<br>PUSH ( )<br>POP ( )………………輸出C<br>PUSH (D)<br>POP ( )………………輸出D<br>PUSH (E)<br>POP ( )………………輸出E<br>故(A)為可能的輸出!</p>
<p>(B)EDCBA<br>PUSH (A)<br>PUSH (B)<br>PUSH (C)<br>PUSH (D)<br>PUSH (E)<br>POP ( )………………輸出E<br>POP ( )………………輸出D<br>POP ( )………………輸出C<br>POP ( )………………輸出B<br>POP ( )………………輸出A<br>故(B)為可能的輸出!</p>
<p>(C)EABCD<br>PUSH (A)<br>PUSH (B)<br>PUSH (C)<br>PUSH (D)<br>PUSH (E)<br>POP ( )………………輸出E<br>POP ( )………………輸出D (題目為輸出A，但實際為輸出D)<br>故(C)為不可能的輸出!</p>
<p>(D)ABDEC<br>PUSH (A)<br>POP ( )………………輸出A<br>PUSH (B)<br>POP ( )………………輸出B<br>PUSH (C)<br>PUSH (D)<br>POP ( )………………輸出D<br>PUSH (E)<br>POP ( )………………輸出E<br>POP ( )………………輸出C<br>故(D)為可能的輸出!</p>
<h3>寫一個函數計算當參數為 n(n很大) 時的值 1-2+3-4+5-6+7……+n</h3><br><figure class="highlight rb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FunctionController</span> &lt; ApplicationController</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></div><div class="line">  render <span class="symbol">text:</span> foo(<span class="number">4</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">private</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(n)</span></span></div><div class="line">  <span class="keyword">if</span> n==<span class="number">1</span></div><div class="line">    <span class="string">"<span class="subst">#&#123;n&#125;</span>"</span></div><div class="line">  <span class="keyword">elsif</span> n==<span class="number">2</span></div><div class="line">    <span class="string">"<span class="subst">#&#123;n-<span class="number">1</span>&#125;</span> - <span class="subst">#&#123;n&#125;</span>"</span></div><div class="line">  <span class="keyword">elsif</span> n.odd?</div><div class="line">    <span class="string">"<span class="subst">#&#123;foo(n-<span class="number">2</span>)&#125;</span> - <span class="subst">#&#123;n-<span class="number">1</span>&#125;</span> + <span class="subst">#&#123;n&#125;</span>"</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="string">"<span class="subst">#&#123;foo(n-<span class="number">2</span>)&#125;</span> + <span class="subst">#&#123;n-<span class="number">1</span>&#125;</span> - <span class="subst">#&#123;n&#125;</span>"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><br><br><h3>How to find second largest number in array.</h3>

<p>解法一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">a = [3,6,774,24,56,2,64,56,34]</div><div class="line">b = a.shift(2).sort</div><div class="line">c =</div><div class="line">  a.inject(b) do |(m2, m), e|</div><div class="line">    case</div><div class="line">    when e &gt; m</div><div class="line">      [m, e]</div><div class="line">    when e &gt; m2</div><div class="line">      [e, m]</div><div class="line">    else</div><div class="line">      [m2, m]</div><div class="line">    end</div><div class="line">  end</div><div class="line">c.first #=&gt; 64</div></pre></td></tr></table></figure></p>
<p>解法二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module Enumerable</div><div class="line">  def max_nth(n)</div><div class="line">    inject([]) do |acc, x|</div><div class="line">      (acc + [x]).sort[[acc.size-(n-1), 0].max..-1]</div><div class="line">    end.first</div><div class="line">  end</div><div class="line">end</div><div class="line">p [1, 5, 2, 32, 2, 41, 15, 55].max_nth(2) #=&gt; 41</div></pre></td></tr></table></figure></p>
<p>解法三：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">進入IRB模式實作！</div><div class="line">a = [3,6,774,24,56,2,64,56,34]</div><div class="line">a.max(2)[1]</div></pre></td></tr></table></figure></p>
<h3><br>這兒有兩條繩子。兩條繩子各是不同長短，和不同的材質。兩條<br>繩子都能從一頭到另一頭實實在在的燒上一個小時。這兩條繩子<br>燃燒的速度不是均勻的，可能開頭燒很快，後段慢慢燒；也可<br>能快慢不均的燒下去。總之，它們耗去一小時來燃燒。<br>現在，你有若干條條繩子，和一個打火機。請你測量出75分鐘。解決<br>方法僅僅要燒繩子，不必動用剪刀或其他尺等測量工具。<br></h3>

<p>同一時間點燃Ａ繩子的兩端與Ｂ繩子的一端，三十分鐘後Ａ繩燃燒完畢的同時點燃Ｂ繩子的另一端，<br>當Ｂ繩燃燒完畢同時點燃Ｃ繩子的兩端，當Ｃ繩燃燒完畢時間恰是一小時十五分鐘。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;&lt;br&gt;有一堆疊(stack)，一開始狀態為空，假設push(X)指令會將資&lt;br&gt;料X 放入堆疊，pop 指令會將堆疊頂端的資料輸出。現在有ABCDE&lt;br&gt;五個資料依序以push 指令放入堆疊中，在放入的過程中與結束&lt;br&gt;後，我們陸續執行了一些pop 指令，下列何者
    
    </summary>
    
    
  </entry>
  
</feed>
