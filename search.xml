<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Rails程式碼整理技巧]]></title>
      <url>https://bohung.github.io/2016/10/20/Rails%E7%A8%8B%E5%BC%8F%E7%A2%BC%E6%95%B4%E7%90%86%E6%8A%80%E5%B7%A7/</url>
      <content type="text"><![CDATA[View:寫 View 時，可以預見需要裝飾的字串（複雜邏輯區塊）使用 Helper(全域變數) 包裝原因：邏輯清楚，程式碼可以「自己敘述自己」 常見需要用 Helper 包裝的地方:1.標題 2.敘述 3.連結 4.圖片 5.按鈕 利用系統的help,整理code時間格式12&lt;td&gt; &lt;%= post.updated_at.to_s(:long) %&gt; &lt;/td&gt;&lt;td&gt; &lt;%= post.updated_at.to_s(:short) %&gt; &lt;/td&gt; post 的 content 能自動斷行1&lt;td&gt; &lt;%= simple_format(post.content) %&gt; &lt;/td&gt; 標題太長就斷行用 …… 來顯示1&lt;td&gt; &lt;%= link_to(truncate(group.title, length: 15 ), group_path(group)) %&gt; &lt;/td&gt; 自己撰寫help, 包裝html123def render_post_content(post) simple_format(truncate(post.content, lenth: 100)) #內容斷行,只顯示頭一百字end PartialController、Model:繼承、混入(module)如果 Model 超過 3 個 PageDown, 拆 Module如果 Controller 每個 action 都有重複的 code, 使用 before_action 如果多個 Controller 有同樣的少樣幾行 action，可以利用繼承來整理code 123456-class Admin::OrdersController &lt; ApplicationController- layout `&lt;blink&gt;` &quot;admin&quot;- before_action :authenticate_user!- before_action :admin_required+class Admin::OrdersController &lt; AdminController 123456-class Admin::ProductsController &lt; ApplicationController- layout &quot;admin&quot;- before_action :authenticate_user!- before_action :admin_required+class Admin::ProductsController &lt; AdminController 新增 admin_controller.rb 讓上述兩個controller來繼承1234class AdminController &lt; ApplicationController layout &quot;admin&quot; before_action :authenticate_user! before_action :admin_required Service Objectl：- method邏輯極其複雜的時候 - 跨Model使用，無法特別歸類於特定Model - 與外部服務有較多關連 - 並非重要功能 - 同一種method有許多類似的使用方法]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Rails即戰力課程第二週筆記]]></title>
      <url>https://bohung.github.io/2016/10/19/Rails%E5%8D%B3%E6%88%B0%E5%8A%9B%E8%AA%B2%E7%A8%8B%E7%AC%AC%E4%BA%8C%E9%80%B1%E7%AD%86%E8%A8%98/</url>
      <content type="text"><![CDATA[before_action 的使用時機： before_action 是什麼？定義在進入Action之前，執行特定的方法，用以減少controller裡面重複的程式碼。Rails在run controller下的 action 前要先跑指定的method。 為什麼要用 before_action？目的在於簡化程式碼，以利程式碼的可讀性和加快程式執行的速度。 如何使用 before_action？在controller裡面，所有方法定義Ｍethods之前使用。 1before_action :authenticate_user! only: [:edit] 程式碼在執行methods之前會先執行身份驗證的機制，可以利用only,except此兩個關鍵字來限定哪些Action要執行，上述程式碼僅有edit所定義的方法才會執行身份驗證。 session 與 cookie 的差別： 什麼是 session 跟 cookie？ 看演唱會或是去遊樂園玩常常會發生一種情況，就是入場以後要暫時出場，這時候工作人員通常會給你蓋個手章，用來註記你曾經入場過，基本上 Cookies 的功用就是這個手章，只要使用者進到我們的網站，我們就幫他儲存一個 Cookies ，下次當使用者再度造訪時我們就可以由 Cookies 得知使用者的資訊。有些遊樂園的手章上會標記當天的入園時間，以免有人回家不洗澡隔天又來玩一次，而 cookies 記錄這個時間的方法就是以 key/value 的形式儲存在使用者的瀏覽器中，但 Cookies 屬於沒有加密的公開檔案，所以不建議儲存敏感資料。 相較於 Cookies 存在 Client 端， Session 則是存在 Server 的資料，通常與 Cookies 相呼應。當使用者造訪我們的網站時，我們由伺服器產生 session id (32 byte long MD5 hash value)，並傳送存有這個 session id 的 cookie 給瀏覽器儲存，之後使用者造訪我們網站時，只需要比對 cookies 上的 session id 和 session 裡的 session id 就可以知道使用者身份，大部份的網站也是運用此原理實作儲存 User 登入狀態的機制。這樣做的好處是若有人劫取到使用者的 Cookies 資料也無法得知資料內容，但是仍有 Hijacking 攻擊的疑慮。 為什麼要用 session 跟 cookie？用來儲存資料的手段，常用來作為使用者是否登入的方法。 Rails 內如何操作 session?在 Rails 內只要用 session[:session_name]的 instance method 就可以取得 session 的特定資料了。若要新增或是覆蓋現有的 session 資料，只要用session[:session_name] = ＹＹＹ就可以了若要刪除特定的 session 值，只要下session_delete(:session_name) 狀態機： 什麼是狀態機？可以透過aasm狀態機去做物件狀態的切換，在EC網站下就是去管理及切換已下單,已付款,已出貨,出貨中,退貨,取消訂單等狀態。 為什麼要使用狀態機去設計訂單狀態？避免手動操作狀態而使狀態混亂，在設定好的規則下讓狀態機來做狀態的管理及切換。 如何在 Rails 內設計狀態機機制？(以Ec-shop網站為例) 安裝 gem &quot;aasm&quot; order 新增 aasm_state 欄位 設定訂單狀態機制 用 AASM 的機制設定訂單付款 如何讓 strong_parameter 接受 nested_attributes：step 1:在Model中，宣告我們可以接受的Attributes。 （model:Photo.rb,Product.rb）step 2:在Controller中，指定接受的Attributes。 （products_controller.rb） board has_many posts, 新造物件宣告方式是： @post = @boards.posts.build 。那如果 book has_one :author，請問要怎麼宣告？@author=@book.build.author after_create 是一種 model callbacks, 請問 model 有多少種 call backs 請列出來 before_validation before_create before_save after_validation after_create after_save after_commit (in controller ) render 與 redirect_to 的差異：render: 不執行action，不改變url的狀態下，直接套用某一個view。redirect_to:會執行指定頁面的controller action，直接轉址到某個url。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://bohung.github.io/2016/10/19/hello-world/</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
